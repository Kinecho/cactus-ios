# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  	before_all do
    	setup_circle_ci
  	end

  	# Bump build number
  	lane :bump do 
  		increment_build_number(xcodeproj: "Cactus.xcodeproj")
  	end

  	lane :print_version do 
		get_version_number(xcodeproj: "Cactus.xcodeproj", target: "Cactus Prod")
		get_build_number		
		version = "#{lane_context[SharedValues::VERSION_NUMBER]}.#{lane_context[SharedValues::BUILD_NUMBER]}"
		sh("echo", version)
  	end

  	lane :tag_version do 
  		version = get_version_number(xcodeproj: "Cactus.xcodeproj", target: "Cactus Prod")
  		get_build_number
  		sh("echo", "version number is...#{version}")
  		sh("echo", version)
		increment_version_number(version_number: version)
		# increment_version_number()

		full_build_name = "#{lane_context[SharedValues::VERSION_NUMBER]}.#{lane_context[SharedValues::BUILD_NUMBER]}"
		sh("echo", "full build name#{full_build_name}")
  		add_git_tag(  			  		
  			tag: "v#{version}"
		)
		git_push_to_remote(tags: true)
  	end

  	lane :patch do 
  		version = get_version_number(xcodeproj: "Cactus.xcodeproj", target: "Cactus Prod")
  		get_build_number
  		sh("echo", "version number is...#{version}")
  		sh("echo", version)
		increment_version_number(version_number: version)
		# increment_version_number()

  		increment_version_number(
  			# xcodeproj: "Cactus.xcodeproj",
  			# bump_type: "patch"  			
		)
  	end

  	lane :minor do 
  		version = get_version_number(xcodeproj: "Cactus.xcodeproj", target: "Cactus Prod")
  		sh("echo", "version number is...")
  		sh("echo", version)
		increment_version_number(version_number: version)
		# increment_version_number()
  		increment_version_number(
  			# xcodeproj: "Cactus.xcodeproj",
  			bump_type: "minor"
		)
  	end


  	lane :version_bump do 
	    tag
	    increment_build_number(xcodeproj: "Cactus.xcodeproj")
	    commit_version_bump(xcodeproj: "Cactus.xcodeproj", message: "[ci skip] Build Version Bump to #{lane_context[SharedValues::BUILD_NUMBER]}")
	    push_to_git_remote(
	    	tags: true
    	)
  	end


	desc "Push a new beta build to TestFlight"
  	lane :beta do  	
		match(
			type: "appstore", 
			readonly: is_ci, 
			app_identifier: ["com.cactus.CactusApp", "com.cactus.CactusApp.Cactus-Today"]
		)
		sync_code_signing(type: "appstore")    
	    build_app(workspace: "Cactus.xcworkspace", scheme: "Cactus Prod", xcargs: "-UseModernBuildSystem=NO")
	    changelog_from_git_commits	    
	    upload_to_testflight(skip_waiting_for_build_processing: true)	    
  	end


  	lane :tag do 
  		get_version_number(xcodeproj: "Cactus.xcodeproj", target: "Cactus Prod")
		get_build_number		
		version = "#{lane_context[SharedValues::VERSION_NUMBER]}.#{lane_context[SharedValues::BUILD_NUMBER]}"
		sh("echo", version)
  		add_git_tag(  			  		
  			tag: "builds/#{lane_context[SharedValues::BUILD_NUMBER]}"  			
		)
  	end  	

  	desc "Push a new beta build to TestFlight"
  	lane :beta_stage do  	
		match(type: "appstore", readonly: is_ci)
		sync_code_signing(type: "appstore")    
	    build_app(workspace: "Cactus.xcworkspace", scheme: "Cactus Stage", xcargs: "-UseModernBuildSystem=NO")
	    changelog_from_git_commits	    
	    upload_to_testflight(skip_waiting_for_build_processing: true)	    
  	end

	lane :manual_upload do
		ENV["DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS"] = "-t DAV #"
		upload_to_testflight(
			skip_waiting_for_build_processing: true,
			ipa: "/Users/neilpoulin/Downloads/Cactus Prod.ipa",
	)
	end

	lane :add_devices do 
		register_devices(
			devices: {
				"Neil iPhone X" => "a47308bf873c8253a9f63144ef4e79e4f912c93a",
				"Erics iPhone" => "45d94802778a55b65e633461d702131f2250fd3c"
			}			
		)
		match(app_identifier: ["com.cactus.StageCactus", "com.cactus.CactusApp"], type: "adhoc", force_for_new_devices: true)

	end 
	

  	lane :test do 
	  	# swiftlint(mode: :lint, output_file: "reports/swiftlint/result.xml", reporter: "junit")
	  	scan(output_types: "junit", 
	  		scheme: "Cactus Prod", 
	  		skip_build: true, 
	  		output_directory: "reports/scan", 
	  		output_files: "results.xml",
			device: "iPhone 8",
			# slack_url: "https://hooks.slack.com/services/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",
			# slack_channel: "engineering-apps-ci",
			# slack_only_on_failure: false,
			# include_system
			clean: true,
			include_simulator_logs: false,
		)
  	end

  	lane :lint do 
	  	sh("mkdir", "-p", "../reports/swiftlint")
	  	swiftlint(
	  		mode: :lint, 	  		
	  		output_file: "reports/swiftlint/results.xml", 
	  		reporter: "junit", 
	  		config_file: ".swiftlint.yml"
	  		)
  	end

lane :lintfix do 
	  	swiftlint(
	  		mode: :autocorrect,
	  		config_file: ".swiftlint.yml"
	  	)
  	end

  	lane :certificates do
		match(app_identifier: [
			"com.cactus.StageCactus", 
			"com.cactus.CactusApp", 
			"com.cactus.CactusApp.Cactus-Today"
		], force: false, type: "appstore")

		match(app_identifier: [
			"com.cactus.StageCactus", 
			"com.cactus.CactusApp", 
			"com.cactus.CactusApp.Cactus-Today"
		], force: false, type: "development")
	end

	lane :create_release do 
		get_version_number(xcodeproj: "Cactus.xcodeproj", target: "Cactus Prod")
		get_build_number		
		version = "#{lane_context[SharedValues::VERSION_NUMBER]}.#{lane_context[SharedValues::BUILD_NUMBER]}"
		release = "com.cactus.CactusApp-#{version}"
		sentry_create_release(
		  auth_token: $SENTRY_AUTH_TOKEN,
		  org_slug: 'kinecho',
	      project_slug: 'cactus-ios',
		  version: version, # release version to create
		  app_identifier: 'com.cactus.CactusApp', # pass in the bundle_identifer of your app
		  finalize: true # Whether to finalize the release. If not provided or false, the release can be finalized using the sentry_finalize_release action
		)

		sh("sentry-cli releases set-commits --auto #{release}")
	end 

	lane :finalize_release do 
		get_version_number(xcodeproj: "Cactus.xcodeproj", target: "Cactus Prod")
		get_build_number		
		version = "#{lane_context[SharedValues::VERSION_NUMBER]}.#{lane_context[SharedValues::BUILD_NUMBER]}"
		release = "com.cactus.CactusApp-#{version}"		
		sentry_finalize_release(
			auth_token: $SENTRY_AUTH_TOKEN,
			org_slug: 'kinecho',
			project_slug: 'cactus-ios',
			version: version, # release version to create
			app_identifier: 'com.cactus.CactusApp', # pass in the bundle_identifer of your app		  
		)

		sh("sentry-cli releases deploys '#{release}' new -e prod")
	end

	lane :upload_symbols do 
		get_version_number(xcodeproj: "Cactus.xcodeproj", target: "Cactus Prod")
		get_build_number
		download_dsyms(version: lane_context[SharedValues::VERSION_NUMBER], build_number: lane_context[SharedValues::BUILD_NUMBER])
		version = "#{lane_context[SharedValues::VERSION_NUMBER]}.#{lane_context[SharedValues::BUILD_NUMBER]}"
		release = "com.cactus.CactusApp-#{version}"
		sh("echo", version)
		sentry_upload_dsym(
			auth_token: $SENTRY_AUTH_TOKEN,
			org_slug: 'kinecho',
			project_slug: 'cactus-ios',
		)
		upload_symbols_to_crashlytics
	end

	lane :upload_symbols_v do 
		get_version_number(xcodeproj: "Cactus.xcodeproj", target: "Cactus Prod")
		get_build_number
		download_dsyms(version: "1.2.2", build_number: "133")
		# version = "#{lane_context[SharedValues::VERSION_NUMBER]}.#{lane_context[SharedValues::BUILD_NUMBER]}"
		# release = "com.cactus.CactusApp-#{version}"
		sh("echo", "Getting symbols for 1.2.2.133")
		sentry_upload_dsym(
			auth_token: $SENTRY_AUTH_TOKEN,
			org_slug: 'kinecho',
			project_slug: 'cactus-ios',
		)
	end

	lane :upload_symbols_all do 
		get_version_number(xcodeproj: "Cactus.xcodeproj", target: "Cactus Prod")
		get_build_number
		download_dsyms(min_version: "1.1.5")
		# version = "#{lane_context[SharedValues::VERSION_NUMBER]}.#{lane_context[SharedValues::BUILD_NUMBER]}"
		# release = "com.cactus.CactusApp-#{version}"
		# sh("echo", "Getting symbols for 1.2.2.133")
		sentry_upload_dsym(
			auth_token: $SENTRY_AUTH_TOKEN,
			org_slug: 'kinecho',
			project_slug: 'cactus-ios',
		)
		upload_symbols_to_crashlytics
	end

	lane :upload_symbols_stage do 
		get_version_number(xcodeproj: "Cactus.xcodeproj", target: "Cactus Stage")
		get_build_number
		download_dsyms(version: lane_context[SharedValues::VERSION_NUMBER], build_number: lane_context[SharedValues::BUILD_NUMBER])
		version = "#{lane_context[SharedValues::VERSION_NUMBER]}.#{lane_context[SharedValues::BUILD_NUMBER]}"
		release = "com.cactus.StageCactus-#{version}"
		sh("echo", version)
		sentry_upload_dsym(
			auth_token: $SENTRY_AUTH_TOKEN,
			org_slug: 'kinecho',
			project_slug: 'cactus-ios',
		)
	end

	lane :ext do 
		['com.cactus.CactusApp'].each do |i|
			produce(
				app_identifier: "#{i}.Cactus-Today",
				app_name: "#{i} Today Extension",
				skip_itc: true
			)
		end
		{
			'com.cactus.CactusApp': 'appstore'
		}.each do |k, v|
			sigh(app_identifier: "#{k}.Cactus-Today")
			sigh(app_identifier: "#{k}")
		end

		{
			'com.cactus.CactusApp': 'development'
		}.each do |k, v|
			sigh(app_identifier: "#{k}.Cactus-Today", development: true)
			sigh(app_identifier: "#{k}", development: true)
		end

	end 
end

